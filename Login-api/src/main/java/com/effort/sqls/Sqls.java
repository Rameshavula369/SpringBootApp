package com.effort.sqls;

public class Sqls {
	
	
	public static final String UPDATE_EMPLOYEE_ENCRYPTION_KEY = "UPDATE `Employees` SET encryptionKey=?,modifyTime=? WHERE `empId` = ?";
    public static final String SELECT_MANAGER_BASIC_DETAILS_BY_ID = "SELECT `Employees`.`empId`,`Employees`.`empFirstName`, `Employees`.`empLastName`,`Employees`.`empEmail` FROM `Employees` WHERE `Employees`.`empId` =? AND `Employees`.`companyId` =?";
	public static final String SELECT_EMPLOYEE_BASIC_DETAILS_BY_ID = "SELECT e.`empId`, `companyId`, `calendarId`, `empNo`, `empFirstName`, `empLastName`, `empTypeId`, `empPhone`, `empAddressStreet`, `empAddressArea`, `empAddressCity`, `empAddressPincode`, `empAddressLandMark`, `empAddressState`, `empAddressCountry`, `empEmail`, `imei`, `managerId`, `homeLat`, `homeLong`, `latLongStatus`, `workLat`, `workLong`, `clientSideId`, `clientCode`, e.`createTime`, `modifyTime`, `manager`, `status`, `timezoneId`, `designation`, `rank`, `skillEntityIds`, `empFormId`, `empAddressDistrict`, `lastLoginTime`, `appId`, `empMediaId`, `checksum`, `empBranchEntityId`, `empIsdCode`, `encryptionKey`, `adUser`, `adUsername`, `adServerCode`, `mapToSettingModifiedTime`, `concurrentLoginCount`, `keepSessionAlive`, `sourceOfAction`, `canOverRideMaxJsonLimit`, `blockedByOpsForSendingCustomerToOfflineUse`, `adNameId`,`employeeCreatedBy`,`enableResolveDistanceForActivityLocations`,`empJoiningDate`,`empProhibitionPeriod`,`isExpired`,`employeeMentType`,`blockMobileActivities`,IF(p.`code` IS NULL, 0, 1) AS `provisioning` FROM `Employees` e LEFT JOIN `Provisionings` p ON (e.`empId` = p.`empId`) WHERE e.`empId` = ?";
	public static final String SELECT_COMPANY_SETTINGS = "SELECT `value` FROM `CompanySettings` WHERE `key` = ? AND `companyId` = ?;";
    public static final String SELECT_EXPIRED_EMPLOYEE_BY_ID = "SELECT `Employees`.`empId`,`Employees`.`isExpired` FROM `Employees` WHERE `Employees`.`empId` =? AND `Employees`.`companyId` =?";
	public static final String SELECT_WEB_USER_BY_USERNAME_EMP = "SELECT `username`, `password`, `salt`, `username` AS `email`, `users`.`empId`, `Employees`.`empNo`,`Employees`.`empFirstName`,`Employees`.`empLastName`,`Employees`.`appId`, `users`.`companyId`, `enabled`,-(tz.timezoneOffset) as tzo,tz.timezoneName as timezoneName ,Employees.timezoneId, Employees.concurrentLoginCount, users.adminUser, users.adminUserLoginEmail,Employees.skipWelcomePage,Employees.empTypeId,Employees.webLoginInfo FROM `users` INNER JOIN `Employees` ON (`users`.`empId` = `Employees`.`empId`) Join Timezones as tz on (tz.`timezoneId`= `Employees`.timezoneId) WHERE `username` = ?";
	public static final String SELECT_WEB_USER_AUTHORITIES = "SELECT `authority` FROM `authorities` WHERE `username` = ?";
	public static final String SELECT_EMPLOYEE_MAPPED_TERRITORIES = "SELECT territoryId FROM TerritoriesMapping WHERE empId=? AND deleted=0";
	public static final String UPDATE_EMPLOYEE_AUDIT_LOG_FOR_EMP_TERRITORY ="UPDATE `EmployeesAuditLog` SET `territoryIds`=? WHERE `auditId` = ? ";
	public static final String INSERT_PROVISIONING = "INSERT INTO `Provisionings`(`empId`, `code`, `createTime`, `modifiedTime`) VALUES (?,?,?,?)";
	public static final String UPDATE_PROVISIONING = "UPDATE `Provisionings` SET `empId`=?,`code`=?, `pendingCode`=?, `modifiedTime`=? WHERE `id` = ?";
	public static final String DELETE_PROVISIONING = "DELETE FROM `Provisionings` WHERE `empId` = ?";
	public static final String SELECT_PROVISIONING_BY_EMP_ID = "SELECT `id` , `empId` , `code`, `pendingCode` , `createTime` , `modifiedTime`, `effortToken` FROM `Provisionings` WHERE `empId` =? ORDER BY `modifiedTime` LIMIT 1";
	public static final String SELECT_COMPANY = "SELECT `companyId`, `companyName`, `companyPhone`, `companyAddressStreet`, `companyAddressArea`, `companyAddressCity`, `companyAddressPincode`,`active`, `webLogoUrl`, `webLogoUrlMimeType`, `appLogoUrl`, `appLogoUrlMimeType`, `testCompany`, `createTime`, `modifiedTime`,`totalSizeUsed` , `billCyclePeriod`, `duePeriod`,companyGstNo,canAccessAdUser,blockActivityBasedLocation,hardDeleteDeviceData,canAccessOpp,companySubscriptionPlanId,gigUserAppId,gigApplicantEmpId,effortPresence FROM `Companys` WHERE `companyId` = ?";
	public static final String INSERT_PROVISIONING_FAILURE_DETAILS = "INSERT INTO `ProvisioningFailureDetails`( `companyId`, `empId`, `empPhone`, `imei`, `username`, `password`, `activationCode`, `override`, `ipAddress`, `failureCode`, `createdTime`, `clientPlatform`, `clientVersion`, `osVersion`, `versionCode`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	public static final String UPDATE_EMPLOYEE_AUDIT_LOG_FOR_EMP_GROUP ="UPDATE `EmployeesAuditLog` SET `empGroupIds`=?,`ipAddress`=? WHERE `auditId` = ? ";
	public static final String AUDIT_EMPLOYEE_ACCESS_SETTINGS = "INSERT INTO `EmployeeAccessSettingsAuditLog` (`auditParent`, `id`, `empId`, `viewCustomer`, `addCustomer`, `modifyCustomer`, `deleteCustomer`, `viewJob`, `addJob`, `modifyJob`, `deleteJob`, `viewJobInvitation`, `addJobInvitation`, `modifyJobInvitation`, `deleteJobInvitation`, `viewForm`, `addForm`, `modifyForm`, `deleteForm`, `viewHoliday`, `viewLeave`, `addLeave`, `modifyLeave`, `deleteLeave`, `viewHomeLocation`, `addHomeLocation`, `modifyHomeLocation`, `viewReport`, `viewMap`, `addEmployee`, `deleteEmployee`, `manageCalendar`, `viewInvoice`, `payInvoice`, `manageAreaGroup`,  `manageTypesStates`, `manageCustomerTypes`, `manageCompanySettings`, `viewEmployeeGroup`, `addEmployeeGroup`, `modifyEmployeeGroup`, `deleteEmployeeGroup`, `viewFormTemplate`, `addFormTemplate`, `modifyFormTemplate`, `deleteFormTemplate`, `manageSecurity`, `manageArticle`, `createdDate`, `modifiedDate`,`manageEmployee`, `auditBy`, `auditAt`,"
			+ " `manageNamedLocation`, `viewClaim`, `addClaim`, `modifyClaim`, `deleteClaim`, `viewRoute`, `addRoute`, `addRoutePlan`, `deleteRoute`) "
			+ "SELECT ?, `id`, `empId`, `viewCustomer`, `addCustomer`, `modifyCustomer`, `deleteCustomer`, `viewJob`, `addJob`, `modifyJob`, `deleteJob`, `viewJobInvitation`, `addJobInvitation`, `modifyJobInvitation`, `deleteJobInvitation`, `viewForm`, `addForm`, `modifyForm`, `deleteForm`, `viewHoliday`, `viewLeave`, `addLeave`, `modifyLeave`, `deleteLeave`, `viewHomeLocation`, `addHomeLocation`, `modifyHomeLocation`, `viewReport`, `viewMap`, `addEmployee`, `deleteEmployee`, `manageCalendar`, `viewInvoice`, `payInvoice`, `manageAreaGroup`, `manageTypesStates`, `manageCustomerTypes`, `manageCompanySettings`, `viewEmployeeGroup`, `addEmployeeGroup`, `modifyEmployeeGroup`, `deleteEmployeeGroup`, `viewFormTemplate`, `addFormTemplate`, `modifyFormTemplate`, `deleteFormTemplate`, `manageSecurity`, `manageArticle`, `createdDate`, `modifiedDate`,`manageEmployee`, ?, ?, "
			+ " `manageNamedLocation`, `viewClaim`, `addClaim`, `modifyClaim`, `deleteClaim`, `viewRoute`, `addRoute`, `addRoutePlan`, `deleteRoute` "
			+ "FROM `EmployeeAccessSettings` WHERE `empId` = ?; ";
	public static final String AUDIT_PROVISIONINGS = "INSERT INTO `ProvisioningsAuditLog` (`auditParent`, `id`, `empId`, `code`, `pendingCode`, `createTime`, `modifiedTime`, `auditBy`, `auditAt`) "
			+ "SELECT ?, `id`, `empId`, `code`, `pendingCode`, `createTime`, `modifiedTime`, ?, ? "
			+ "FROM `Provisionings` WHERE `empId` = ?; ";
	public static final String AUDIT_USERS = "INSERT INTO `usersAuditLog` (`auditParent`, `username`, `password`, `salt`, `empId`, `customerId`, `companyId`, `enabled`, `auditBy`, `auditAt`) "
			+ "SELECT ?, `username`, `password`, `salt`, `empId`, `customerId`, `companyId`, `enabled`, ?, ? "
			+ "FROM `users` WHERE `empId` = ?; ";
	public static final String AUDIT_EMPLOYEE_SETTINGS = "INSERT INTO `EmployeeSettingsAuditLog`(`auditParent`,`id`,`empId`, `key`, `value`,`auditBy`, `auditAt`) SELECT  ?,`id`,`empId`, `key`, `value`,?,? FROM  EmployeeSettings  WHERE empid=?";
	public static final String INSERT_INTO_SETTINGS_AUDIT_LOG ="INSERT INTO `SettingsAuditLog`(`auditParent`, `id`, `companyId`, `empId`, `key`, `value`, `createdTime`, `modifiedTime`, `auditAt`, `auditBy`) SELECT ?,`id`, `companyId`, `empId`, `key`, `value`, `createdTime`, `modifiedTime`,?,? FROM `Settings` WHERE empId=?";
	public static final String AUDIT_EMPLOYEE = "INSERT INTO `EmployeesAuditLog` (`auditParent`, `empId`, `companyId`, `calendarId`, `empNo`, `empFirstName`, `empLastName`, `empTypeId`, `empPhone`, `empAddressStreet`, `empAddressArea`, `empAddressCity`, `empAddressDistrict`, `empAddressPincode`, `empAddressLandMark`, `empAddressState`, `empAddressCountry`, `empEmail`, `imei`, `managerId`, `homeLat`, `homeLong`, `workLat`, `workLong`, `clientSideId`, `clientCode`, `createTime`, `modifyTime`, `manager`, `status`,`timezoneId`,`designation`,`rank`,`skillEntityIds`,`auditBy`, `auditAt`,`empMediaId`,`appId`,`empBranchEntityId`,`sourceofAction`,`ipAddress`,`oppUserName`,`stopPushNotificationsAfterWorkingHours`) SELECT ?, `empId`, `companyId`, `calendarId`, `empNo`, `empFirstName`, `empLastName`, `empTypeId`, `empPhone`, `empAddressStreet`, `empAddressArea`, `empAddressCity`, `empAddressDistrict`, `empAddressPincode`, `empAddressLandMark`, `empAddressState`, `empAddressCountry`, `empEmail`, `imei`, `managerId`, `homeLat`, `homeLong`, `workLat`, `workLong`, `clientSideId`, `clientCode`, `createTime`, `modifyTime`, `manager`, `status`,`timezoneId`,`designation`,`rank`,`skillEntityIds`, ?, ?,`empMediaId`,`appId`,`empBranchEntityId`,`sourceOfAction`,?,?,stopPushNotificationsAfterWorkingHours FROM `Employees` WHERE `empId` = ?";
	public static final String SELECT_EMPLOYEE_GROUP_OF_EMPLOYEES = "SELECT `EmployeeGroup`.`companyId`, `EmployeeGroup`.`empGroupId`, `EmployeeGroup`.`empGroupName`, `EmployeeGroup`.`empGroupTypeId`, `EmployeeGroup`.`externalId`, `EmployeeGroup`.`apiUserId` FROM `EmployeeGroupMap` INNER JOIN `EmployeeGroup` ON (`EmployeeGroupMap`.`empGroupId` = `EmployeeGroup`.`empGroupId` AND `EmployeeGroupMap`.`empId` IN (:ids) AND EmployeeGroupMap.deleted=0 );";
	public static final String SELECT_PROVISIONING_BY_CODE_OR_PENDING_CODE = "SELECT `id` , `empId` , `code`, `pendingCode` , `createTime` , `modifiedTime` FROM `Provisionings` WHERE `code` =? OR `pendingCode` =? ORDER BY `modifiedTime` LIMIT 1";
	public static final String SELECT_EMPLOYEE_BY_ID = "SELECT `Employees`.`empId`,`Employees`.`designation`,`Employees`.`rank`,a.authority,`skillEntityIds`,`empFormId`, `Employees`.`companyId`, `calendarId`, `empNo`, `empFirstName`, `empLastName`, `empTypeId`, `empPhone`, `empAddressStreet`, `empAddressArea`, `empAddressCity`, `empAddressDistrict`, `empAddressPincode`, `empAddressLandMark`, `empAddressState`, `empAddressCountry`, `empEmail`, `imei`, `homeLat`, `homeLong`, `workLat`, `workLong`, `managerId`,`lastLoginTime`,`canOverRideMaxJsonLimit`, IF(`Provisionings`.`code` IS NULL, 0, 1) AS `provisioning`, `Employees`.`createTime`, `Employees`.`modifyTime`, `Employees`.`manager`, `Employees`.`status`,tz.timeZoneDisplayName,IF(`users`.`username` IS NULL, 0,1) AS `createWebUser`,`Employees`.timezoneId,-(tz.timezoneOffset) as timezoneOffset,`Employees`.appId,`Employees`.empMediaId,`Employees`.empBranchEntityId, `Employees`.`empIsdCode`,`Employees`.`adUser`,`Employees`.`adUsername`,`Employees`.`adServerCode`, `Employees`.`encryptionKey`,`Employees`.mapToSettingModifiedTime, `Employees`.keepSessionAlive,`Employees`.blockedByOpsForSendingCustomerToOfflineUse,`Employees`.adNameId,`Employees`.createTime As createdTime,`employeeCreatedBy`,`employeeModifiedBy`, `EmployeesAutoBlockedAndDisabled`.`blocked`, `EmployeesAutoBlockedAndDisabled`.`disabled`,`generateQrCode`,`sourceOfAction`,`sourceOfModification`,`empJoiningDate`,`empProhibitionPeriod`,`expiryDate`,`notifyBefore`,`notifyToEmails`, `isExpired`,employeeMentType,blockMobileActivities,stopPushNotificationsAfterWorkingHours  FROM `Employees` Join Timezones as tz on (tz.`timezoneId`= `Employees`.timezoneId) LEFT JOIN `Provisionings` ON (`Employees`.`empId` = `Provisionings`.`empId`) LEFT JOIN `users` ON (`Employees`.`empId` = `users`.`empId`) LEFT JOIN authorities a ON a.username = `users`.userName LEFT JOIN `EmployeesAutoBlockedAndDisabled` ON  (`EmployeesAutoBlockedAndDisabled`.`empId`= `Employees`.`empId` AND `EmployeesAutoBlockedAndDisabled`.`deleted` = 0 ) WHERE `Employees`.`empId` = ?";
	public static final String SELECT_ITUNE_PURCHASES_RECORDS_COUNT_FOR_EMP="SELECT COUNT(*) FROM `ITunesPurchases` WHERE  `empId`=?";
	public static final String SELECT_ACTIVE_SUBSCRIPTION = "SELECT `id`, `companyId`, `numOfEmployees`, `totalStorageAllocated`, `subscriptionPrice`, `renewalPrice`, `trial`, `state`, `subscriptionTime`, `expiryTime`, `gracePreiod`, `lastRenewalTime`, `unsubscriptionTime`, `modifiedTime` FROM `Subscriptions` WHERE `companyId` = ? AND `state` = 1 ORDER BY `lastRenewalTime`,`id` LIMIT 0,1";
	public static final String UPDATE_UDID_CODE_FOR_EMP = "UPDATE `ITunesPurchases` SET  `udid`= ?  WHERE `empId` = ?";
	public static final String SELECT_ITUNE_PURCHASE_RECORD = "SELECT * FROM `ITunesPurchases` WHERE `empId` = ?";
	public static final String UPDATE_EFFORT_TOKEN_IN_PROVISIONINS_FOR_GIVEN_EMP_ID_AND_EMP_CODE = "UPDATE `Provisionings` SET `effortToken` = ?, `code` = ?, `modifiedTime` = ? WHERE `empId` = ?";
	public static final String UPDATE_EMPLOYEE_IMEI = "UPDATE `Employees` SET `imei`=?,`modifyTime` = ? WHERE empId = ?";
	public static final String INSERT_ITUNES_PURCHASE = "INSERT INTO `ITunesPurchases`(`empId`, `udid`,`appStoreProductId`, `transactionId`, `purchaseTime`,`expiryTime`,`itemId`,`receiptData`, `trial`,`status`, `statusMessage`,`appStoreResponse`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)  ON DUPLICATE KEY UPDATE  `udid`=VALUES(`udid`), `transactionId`=VALUES(`transactionId`), `purchaseTime`=VALUES(`purchaseTime`), `expiryTime`=VALUES(`expiryTime`),  `itemId`=VALUES(`itemId`), `receiptData`=VALUES(`receiptData`),`trial`=VALUES(`trial`),   `status`=VALUES(`status`), `statusMessage`=VALUES(`statusMessage`),`appStoreResponse`=VALUES(`appStoreResponse`)";
	public static final String INSERT_PROVISIONING_WITH_EFFORT_TOKEN = "INSERT INTO `Provisionings`(`empId`, `code`, `createTime`, `modifiedTime`, `effortToken`) VALUES (?,?,?,?,?)";
	public static final String UPDATE_PROVISIONING_WITH_EFFORT_TOKEN = "UPDATE `Provisionings` SET `empId`=?,`code`=?, `pendingCode`=?, `effortToken`=?, `modifiedTime`=? WHERE `id` = ?";
	public static final String INSERT_OUTGOING_SMS = "INSERT INTO `OutgoingSMS`(`msisdn`, `message`, `createTime`, `status`,`companyId`, `smsType`,`sendSmsViaWhatsaap`,`sendSmsType`) VALUES (?,?,?,?,?,?,?,?)";
	public static final String SELECT_ACTIVE_EMPLOYEE_BY_IMEI = "SELECT `Employees`.`empId`, `companyId`, `calendarId`, `empNo`, `empFirstName`, `empLastName`, `empTypeId`, `empPhone`, `empAddressStreet`, `empAddressArea`, `empAddressCity`, `empAddressDistrict`, `empAddressPincode`, `empAddressLandMark`, `empAddressState`, `empAddressCountry`, `empEmail`, `imei`, `homeLat`, `homeLong`, `workLat`, `workLong`, `managerId`, IF(`Provisionings`.`code` IS NULL, 0,1) AS `provisioning`, `Employees`.`createTime`, `Employees`.`modifyTime`, `Employees`.`manager`, `Employees`.`status`,(SELECT `timezoneDisplayName` FROM `Timezones` WHERE `timezoneId`= `Employees`.timezoneId ) as timeZoneDisplayName,`Employees`.timezoneId,-(SELECT `timezoneOffset` FROM `Timezones` WHERE `timezoneId`= `Employees`.timezoneId ) as timezoneOffset,`skillEntityIds`,`empFormId`,`Employees`.empMediaId,`Employees`.empIsdCode,`Employees`.empJoiningDate,`Employees`.empProhibitionPeriod,employeeMentType,blockMobileActivities FROM `Employees` LEFT JOIN `Provisionings` ON (`Employees`.`empId` = `Provisionings`.`empId`) WHERE `Employees`.`imei` = ? AND `Employees`.`status` = 1 limit 1";
	public static final String INSERT_MAIL = "INSERT INTO `OutgoingEmail` (`mailFrom`, `mailTo`, `mailSubject`, `mailBody`, `createTime`, `modifiedTime`, `mailBodyType`, `companyId`, 	`verificationRequired`,`mailPriorityType`,`mailSentType`) VALUES (?,?,?,?,?,?,?,?,?,?,?);";
    public static final String SELECT_EMPLOYEE_BY_PHONE_NO = "SELECT `Employees`.`empId`, `companyId`, `calendarId`, `empNo`, `empFirstName`, `empLastName`, `empTypeId`, `empPhone`, `empAddressStreet`, `empAddressArea`, `empAddressCity`, `empAddressDistrict`, `empAddressPincode`, `empAddressLandMark`, `empAddressState`, `empAddressCountry`, `empEmail`, `imei`, `homeLat`, `homeLong`, `workLat`, `workLong`, `managerId`, IF(`Provisionings`.`code` IS NULL, 0,1) AS `provisioning`, `Employees`.`createTime`, `Employees`.`modifyTime`, `Employees`.`manager`, `Employees`.`status`,(SELECT `timezoneDisplayName` FROM `Timezones` WHERE `timezoneId`= `Employees`.timezoneId ) as timeZoneDisplayName,`Employees`.timezoneId,-(SELECT `timezoneOffset` FROM `Timezones` WHERE `timezoneId`= `Employees`.timezoneId ) as timezoneOffset ,`skillEntityIds`,`empFormId`,`Employees`.empMediaId,`Employees`.empIsdCode, `Employees`.generateQrCode,`Employees`.empJoiningDate,`Employees`.empProhibitionPeriod,employeeMentType,blockMobileActivities FROM `Employees` LEFT JOIN `Provisionings` ON (`Employees`.`empId` = `Provisionings`.`empId`) WHERE concat(ifnull(Employees.empIsdCode,''),`Employees`.`empPhone`) = concat(ifnull(Employees.empIsdCode,''), ?) order by `Employees`.`empId`";
	public static final String INSERT_ACTIVATION_CODE_RESEND_AUDIT_LOG = "INSERT INTO ResendActivationCodeAuditLog(phoneNo, ipAddress, auditAt) VALUES (?,?,?);";
	public static final String SELECT_PREVIOUS_RESEND_ACTIVATION_AUDIT_COUNT_BY_PHONE_NO = "SELECT COUNT(id) FROM ResendActivationCodeAuditLog where phoneNo = ? AND auditAt >= DATE_ADD(?, INTERVAL ? MINUTE);";
	public static final String SELECT_PREVIOUS_RESEND_ACTIVATION_AUDIT_COUNT_BY_IPADDRESS = "SELECT COUNT(id) FROM ResendActivationCodeAuditLog where ipAddress = ? AND auditAt >= DATE_ADD(?, INTERVAL ? MINUTE);";
	public static final String SELECT_ACTIVE_PROVISIONING_OTK_BY_EMP = "SELECT `id`, `empId`, `companyId`,`empPhone`, `key`, `deleted`, `createTime`, `modifyTime` FROM `ProvisioningOTKeys` WHERE `empId` =?  and `companyId`  = ? and `empPhone`=? and `deleted`=0";
	public static final String INSERT_PROVISIONING_OTK = "INSERT INTO `ProvisioningOTKeys`( `empId`, `companyId`,`empPhone`, `key`, `deleted`, `createTime`, `modifyTime`) VALUES (?,?,?,?,?,?,?)";
	public static final String SELECT_EXISITNG_KEY_FOR_PHONE_NUM = "SELECT `id`, `empId`, `companyId`, `empPhone`, `key`, `deleted`, `createTime`, `modifyTime` FROM `ProvisioningOTKeys` WHERE  `empPhone` = ? AND `empId` <> ? AND `deleted` = 0";
	public static final String DELETE_EXISITING_PROVISIONING_KEYS = "UPDATE `ProvisioningOTKeys` SET `deleted` = 1 , `modifyTime`=? WHERE `id` in (:ids)";
	public static final String SELECT_SMS_ACTIVATION_TEMPLATE_FOR_COMPANY = "SELECT * FROM `SmsActivationTemplate` WHERE `companyId` = ?";
	public static final String INSERT_MEDIA = "INSERT INTO `Medias`(`companyId`, `empId`, `mimeType`, `localPath`, `fileName`, `createdTime`, `modifiedTime`,config, `externalMediaId`) VALUES (?,?,?,?,?,?,?,?,?)";
	public static final String INSERT_MEDIA_CHECKSUM = "INSERT INTO `MediaChecksums` (`mediaId`, `localpath`, `checksum`) VALUES (?,?,?);";
	public static final String SELECT_ACTIVE_PROVISIONING_OTK_BY_EMPPHONE = "SELECT `id`, `empId`, `companyId`,`empPhone`, `key`, `deleted`, `createTime`, `modifyTime` FROM `ProvisioningOTKeys` WHERE `empPhone`=? and `deleted`=0";
	public static final String UPDATE_USED_PROVISIONING_OTKEY = "UPDATE `ProvisioningOTKeys` SET `deleted`=1,`modifyTime`=? WHERE `empPhone`=? and `key`=?";
	public static final String SELECT_ACTIVE_EMPLOYEE_BY_PHONE_NO = "SELECT `Employees`.`empId`, `companyId`, `calendarId`, `empNo`, `empFirstName`, `empLastName`, `empTypeId`, `empPhone`, `empAddressStreet`, `empAddressArea`, `empAddressCity`, `empAddressDistrict`, `empAddressPincode`, `empAddressLandMark`, `empAddressState`, `empAddressCountry`, `empEmail`, `imei`, `homeLat`, `homeLong`, `workLat`, `workLong`, `managerId`, IF(`Provisionings`.`code` IS NULL, 0,1) AS `provisioning`, `Employees`.`createTime`, `Employees`.`modifyTime`, `Employees`.`manager`, `Employees`.`status`,(SELECT `timezoneDisplayName` FROM `Timezones` WHERE `timezoneId`= `Employees`.timezoneId ) as timeZoneDisplayName,`Employees`.timezoneId,-(SELECT `timezoneOffset` FROM `Timezones` WHERE `timezoneId`= `Employees`.timezoneId ) as timezoneOffset ,`skillEntityIds`,`empFormId`,`Employees`.empMediaId,`Employees`.empIsdCode, `Employees`.generateQrCode,`Employees`.empJoiningDate,`Employees`.empProhibitionPeriod,employeeMentType,blockMobileActivities FROM `Employees` LEFT JOIN `Provisionings` ON (`Employees`.`empId` = `Provisionings`.`empId`) WHERE concat(ifnull(Employees.empIsdCode,''),`Employees`.`empPhone`) = concat(ifnull(Employees.empIsdCode,''), ?) AND `Employees`.`status` = 1 limit 1";
	public static final String SELECT_GLOBAL_SETTINGS = "SELECT `value` FROM `GlobalSettings` WHERE `key` = ?;";

	
	
	
	
	
	
}
